#version 450

out vec4 FragColour;

in vec3 _position;
in vec3 _colour;
in vec3 _normal;
in vec2 _texCoord;
in vec3 _tangent;
in vec3 _biTangent;

//uniform goes here

uniform sampler2D diffuseTextureSampler;
uniform sampler2D normalTextureSampler;
uniform sampler2D specularTextureSampler;

uniform vec3 ambientLight = vec3(0.15f,0.15f,0.15f);
uniform vec3 lightColour = vec3(1.0f,1.0f,1.0f);

uniform float specPower = 30.0f;   // specular power

uniform vec3 camPos; 
uniform mat3 lights; // = normalize(vec3(1.0f, 0.0f, 0.0f)); // normalised light direction from light
uniform int numLights;

void main()
{

	// vec3 diffuseColour = vec3(0.8, 0.8, 0.8);
	// vec3 specularColour = vec3(0.5, 0.5, 0.5);
	// vec3 ambientColour = vec3(1.0, 1.0, 1.0);
	
	
	vec3 diffuseTexture = texture(diffuseTextureSampler, _texCoord).xyz;
	vec3 specularTexture = texture(specularTextureSampler, _texCoord).xyz;
	vec3 normalTexture = texture(normalTextureSampler, _texCoord).xyz * 2 - 1;
	
	
	vec3 vTangent = normalize(_tangent);
	vec3 vBiTangent = normalize(_biTangent);
	vec3 vNormal = normalize(_normal);
	
	mat3 TBN = mat3(vTangent,vBiTangent,vNormal);
	vNormal = TBN * normalTexture;
	
	
	vec3 Ambient = ambientLight * diffuseTexture;
	
	vec3 finalDiffuse;
	vec3 finalSpecular;
	
	for (int i = 0; i < numLights; i++)
	{
		vec3 lightDirection = normalize(vec3(lights[i][0], lights[i][1], lights[i][2]));
		
		float NdL = max(0.0f, dot(vNormal, -lightDirection)); // Lambert Term
		// max(0.0f, min(1.0f, dot(vNormal, -lightDirection))); // Lambert Term
		vec3 Diffuse = diffuseTexture * lightColour * NdL; // diffuse light for one light;
		
		vec3 surfaceToEye = normalize(camPos - _position);
		vec3 reflection = reflect(-lightDirection, vNormal);
		
		float specTerm = pow(max(0.0f, dot(reflection, surfaceToEye)), specPower);
		vec3 Specular =  specularTexture * lightColour * specTerm;
		
		finalDiffuse += Diffuse;
	    finalSpecular += Specular;
	}

	FragColour = vec4(Ambient + finalDiffuse + finalSpecular, 1.0f);
}